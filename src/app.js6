'use strict';

import Container 						from './components/containerMain';
import Request							from './helpers/requests';
import {KEEP_ALIVE_REFRESH, AREA_LIST} 	from './constants';

const apiData	= window.apiData || {};
const saved		= localStorage.getItem('matrix');

const gdsSettings = {
	sessionIndex 	: 0,
	pcc				: {},
	matrix			: saved ? JSON.parse( saved ) : {rows : 1, cells : 1},
	activeTerminal	: null,
	canCreatePq		: false
};

const Gds = {
	apollo: Object.assign({}, gdsSettings, {
		name 			: 'apollo',
		sessionIndex 	: AREA_LIST.indexOf(apiData.settings['gds']['apollo']['area']),
		canCreatePq		: !!apiData.settings['gds']['apollo']['canCreatePq']
	}),

	sabre	: Object.assign({}, gdsSettings, {
		name 			: 'sabre',
		sessionIndex 	: AREA_LIST.indexOf(apiData.settings['gds']['sabre']['area']),
		canCreatePq		: !!apiData.settings['gds']['sabre']['canCreatePq']
	})
};

class TerminalState
{
	constructor()
	{
		const curGds = apiData.settings.common['currentGds'] || 'apollo';

		this.state = {
			language		: 'APOLLO',
			fontSize		: 1,
			hideMenu		: false,

			gdsObj			: Gds[curGds]
		};

		// Request.get(`terminal/keepAlive`, true);
		setInterval( () => Request.get(`terminal/keepAlive`, true), KEEP_ALIVE_REFRESH );
	}

	getMatrix()
	{
		return this.state.gdsObj.matrix;
	}

	getPcc()
	{
		return this.state.gdsObj.pcc;
	}

	getActiveTerminal()
	{
		return this.state.gdsObj['activeTerminal'];
	}

	getGds()
	{
		return this.state.gdsObj['name'];
	}

	getLanguage()
	{
		return this.state['language'];
	}

	getAreaIndex()
	{
		return this.state.gdsObj['sessionIndex'];
	}

	getSessionAreaMap()
	{
		const key = this.getGds() === 'apollo' ? 'S': 'Â¤';
		return AREA_LIST.map( char => key + char );
	}

	getBuffer( gds, terminalId )
	{
		const buffer = apiData.buffer;

		if ( apiData && buffer && buffer.gds && buffer.gds[gds] )
			return buffer['gds'][gds]['terminals'][terminalId];

		return false;
	}

	purgeScreens()
	{
		Container.purgeScreens( this.getGds() );
		Request.get(`terminal/clearBuffer`, true);
	}

	execCmd( cmd = '' )
	{
		const terminal = this.getActiveTerminal();

		if (terminal && cmd)
			terminal.exec( cmd );
	}

	isLanguageApollo()
	{
		return this.getLanguage() === 'APOLLO';
	}

	action( action, params )
	{
		switch (action)
		{
			case 'CHANGE_GDS':

				Gds[ this.getGds() ] = this.state.gdsObj;

				// console.log( 'gds params', Gds[params] );
				// console.log( 'gds params', this.state.gdsObj );

				this.change({
					gds		: params,
					gdsObj 	: Gds[params]
				});

			break;

			case 'CHANGE_SESSION_AREA' :

				this.change({
					gdsObj : Object.assign( {}, this.state.gdsObj, {sessionIndex : params} )
				});

				// return Container.menuRender( this.state );
			break;

			case 'CHANGE_SESSION_BY_MENU' :

				// console.log( params );

				const command	= this.getSessionAreaMap()[params];
				const xz		= this.getActiveTerminal().exec( command );

				// console.log( '!!!', xz );
				// return false;

			break;

			case 'CHANGE_MATRIX':

				localStorage.setItem('matrix', JSON.stringify( params ) );

				this.change({
					gdsObj : Object.assign( {}, this.state.gdsObj, {matrix : params} )
				});

			break;

			case 'CHANGE_ACTIVE_TERMINAL' :
				// TODO :: optimize

				this.change({
					gdsObj : Object.assign( {}, this.state.gdsObj, { activeTerminal : params } )
				});

				// todo move to
				// params[0].parentNode.classList.add('active');
				// return false;
			break;

			case 'CHANGE_PCC' :

				const area = this.getAreaIndex();

				this.change({
					gdsObj : Object.assign({}, this.state.gdsObj, {
						pcc : {
							[area] : params
						}
					})
				});

			break;

			// case 'ACTIVATE_PQ' :
			// break;

			case 'CAN_CREATE_PQ' :

				// console.log("SSSSS", params);
				// console.log("SSSSS", this.state.gdsObj.canCreatePq);

				if (this.state.gdsObj.canCreatePq !== params )
				{
					this.change({
						gdsObj : Object.assign( {}, this.state.gdsObj, { canCreatePq : params } )
					});

					// console.log( 'trigger BTN ');
				}

				return false;

			break;

			case 'PQ_MODAL_SHOW' :

				if (this.state.gdsObj.activeTerminal)
				{
					apiData.pqModal.show({
						onClose	: () => this.change( {hideMenu: false} )
					})

					.then( () => this.change({hideMenu: true}) );
				}

				return false;
			break;

			case 'PQ_MACROS' :

				const term = this.getActiveTerminal();

				if (term)
				{
					window.activePlugin.hiddenBuff = ['A/V/13SEPSEAMNL+DL', '01Y1*', '*R', '$BB'];
					window.activePlugin.loopCmdStack();
				}

				return false;
			break;
		}
	}

	change( params = {} )
	{
		this.state = Object.assign( {}, this.state, params );

		console.log(' change ', params);

		Container.render( this.state );
	}
}

window.TerminalState = new TerminalState();

let resizeTimeout;

window.onresize = function() {

	if (resizeTimeout)
		clearInterval(resizeTimeout);

	resizeTimeout = setTimeout( () => window.TerminalState.change(), 150 );
};

Container.init( apiData['htmlRootId'] || 'rootTerminal' );
window.TerminalState.change({}, '');