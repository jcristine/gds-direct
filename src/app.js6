'use strict';

import Container from './components/containerMain';

const apiData = window.apiData || {};

const Context = {
	init()
	{
		let rootId = apiData['htmlRootId'] || 'rootTerminal';
		Container.init( rootId );
	}
};

let Gds = {
	'apollo' : {
		session : 0,
		pcc		: {}
	},

	'sabre'	: {
		session : 0,
		pcc		: {}
	}
};

window.TerminalState = {

	state			: {

		gds 			: 'apollo',

		sessionIndex	: 0,

		matrix			: {
			rows 	: 1,
			cells 	: 1
		},

		fontSize	: 1,
		language	: 'APOLLO',
		activeTerminal : ''
	},

	sessions		: {},

	currentSession	: null,

	getPcc()
	{
		return Gds[this.state.gds].pcc;
	},

	change( params, action )
	{
		this.state = Object.assign( this.state, params );

		// let sIndex 				= ( this.state['sessionIndex'] || 0 ) + '-' + this.state.gds;
		let sIndex 				= ( 0 ) + '-' + this.state.gds;
		this.sessions[ sIndex ] = this.sessions[ sIndex ] || {};

		switch (action)
		{
			case 'CHANGE_GDS':
				this.state.matrix 			= this.sessions[ sIndex ].matrix || { rows : 1, cells : 1 };
				this.state.sessionIndex 	= Gds[this.state.gds]['session'];
				this.state.activeTerminal 	= Gds[this.state.gds]['activeTerminal'];
				break;

			case 'CHANGE_FONT_SIZE':
				// this.state.matrix 	= this.sessions[ sIndex ].matrix || { rows : 1, cells : 1 };
			break;

			case 'CHANGE_SESSION' :
				Gds[this.state.gds]['session'] = this.state.sessionIndex;
			break;

			case 'CHANGE_SESSION_BY_MENU' :

				if (this.state.activeTerminal)
				{
					this.state.activeTerminal.exec( params.command );
				} else
				{
					alert('no terminal window are active');
				}

				return false;
			break;

			case 'CHANGE_MATRIX' :
				this.sessions[ sIndex ].matrix = this.state.matrix;
			break;

			case 'CHANGE_ACTIVE_TERMINAL' :
				Gds[this.state.gds]['activeTerminal'] = this.state.activeTerminal;
				return false;
			break;

			case 'CHANGE_PCC' :
				Gds[this.state.gds]['pcc'][this.state.sessionIndex] = params.pcc;
				// Gds[this.state.gds]['activeTerminal'] = this.state.activeTerminal;
				Container.menuRender();
				return false;
			break;

			// default:
			// return;
		}

		Container.render( this.state );
	}
};

Context.init();