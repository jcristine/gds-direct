'use strict';

import Container from './components/containerMain';

const apiData = window.apiData || {};

const Context = {
	init()
	{
		let rootId = apiData['htmlRootId'] || 'rootTerminal';
		Container.init( rootId );
	}
};

let Gds = {
	'apollo' : {
		session : 0,
		pcc		: {}
	},

	'sabre'	: {
		session : 0,
		pcc		: {}
	}
};

let retrievedObject;

if ( localStorage.getItem('matrix') )
{
	retrievedObject = JSON.parse( localStorage.getItem('matrix') )
} else
{
	retrievedObject = {
		rows 	: 3,
		cells 	: 3
	}
}

window.TerminalState = {

	state			: {
		gds 			: 'apollo',
		sessionIndex	: 0,
		matrix			: retrievedObject,
		fontSize		: 1,
		language		: 'APOLLO',
		activeTerminal	: ''
	},

	getMatrix()
	{
		return this.state.matrix;
	},

	getPcc()
	{
		return Gds[this.state.gds].pcc;
	},

	getSessionAreaMap()
	{
		return this.state.language === 'APOLLO' ? ['SA', 'SB', 'SC', 'SD', 'SE' ] : ['¤A', '¤B', '¤C', '¤D', '¤E'];
	},

	purgeScreens()
	{
		Container.purgeScreens();
	},

	change( params, action )
	{
		this.state 				= Object.assign( this.state, params );

		switch (action)
		{
			case 'CHANGE_GDS':
				this.state.matrix 			= Gds[this.state.gds]['matrix'] || { rows : 1, cells : 1 };
				this.state.sessionIndex 	= Gds[this.state.gds]['session'];
				this.state.activeTerminal 	= Gds[this.state.gds]['activeTerminal'];
			break;

			case 'CHANGE_FONT_SIZE':
				// this.state.matrix 	= this.sessions[ sIndex ].matrix || { rows : 1, cells : 1 };
			break;

			case 'CHANGE_SESSION' :
				Gds[this.state.gds]['session'] = this.state.sessionIndex;
				return Container.menuRender();
			break;

			case 'CHANGE_SESSION_BY_MENU' :
				let command = this.getSessionAreaMap()[params.sessionIndex];
				this.state.activeTerminal.exec( command );

				return false;
			break;

			case 'CHANGE_MATRIX' :
				localStorage.setItem('matrix', JSON.stringify(this.state.matrix) );
				Gds[this.state.gds]['matrix'] = this.state.matrix;
			break;

			case 'CHANGE_ACTIVE_TERMINAL' :
				Gds[this.state.gds]['activeTerminal'] = this.state.activeTerminal;
				return Container.menuRender();
			break;

			case 'CHANGE_PCC' :
				Gds[this.state.gds]['pcc'][this.state.sessionIndex] = params.pcc;
				return Container.menuRender();
			break;
		}

		Container.render( this.state );
	}
};

let resizeTimeout;

window.onresize = function() {

	if (resizeTimeout)
		clearInterval(resizeTimeout);

	resizeTimeout = setTimeout( () => {
		window.TerminalState.change({});
	}, 100 );

};

Context.init();