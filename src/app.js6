'use strict';

import Container from './components/containerMain';

const apiData = window.apiData || {};

const Context = {
	init()
	{
		let rootId = apiData['htmlRootId'] || 'rootTerminal';
		Container.init( rootId );
	}
};

// apiData.settings = {
// 	common 	: 'apollo',
// 	gds 	: {
// 		apollo 	: {},
// 		sabre 	: {}
// 	}
// };

const gdsSettings = {
	sessionIndex 	: 0,
	pcc				: {},
	matrix			: { rows: 1, cells : 1},
	activeTerminal	: null
};

const Gds = {
	'apollo' 	: Object.assign({}, gdsSettings),
	'sabre'		: Object.assign({}, gdsSettings),
};

class TerminalState
{
	constructor()
	{
		this.areaList = ['A', 'B', 'C', 'D', 'E', 'F'];

		Gds['apollo']['sessionIndex']	= this.areaList.indexOf( apiData.settings['gds']['apollo']['currentArea'] );
		Gds['sabre']['sessionIndex'] 	= this.areaList.indexOf( apiData.settings['gds']['sabre']['currentArea'] );

		const saved		= localStorage.getItem('matrix');
		const curGds	= apiData.settings.common['currentGds'] || 'apollo';

		this.state = {
			gds 			: curGds,
			sessionIndex	: Gds[curGds]['sessionIndex'],
			matrix			: saved ? JSON.parse( saved ) : {rows : 1, cells : 1},
			fontSize		: 1,
			language		: 'APOLLO',
			activeTerminal	: ''
		};
	}

	getMatrix()
	{
		return this.state.matrix;
	}

	getPcc()
	{
		return Gds[this.state.gds].pcc;
	}

	getSessionAreaMap()
	{
		const key = this.state.gds === 'apollo' ? 'S': 'Â¤';
		return this.areaList.map( char => key + char );
	}

	getBuffer( gds, terminalId )
	{
		if ( apiData && apiData.buffer && apiData.buffer.gds && apiData.buffer.gds[gds] )
			return apiData.buffer['gds'][gds]['terminals'][terminalId];

		return false;
	}

	purgeScreens()
	{
		Container.purgeScreens();
	}

	change( params, action )
	{
		this.state = Object.assign( this.state, params );

		const gds = this.state.gds;

		switch (action)
		{
			case 'CHANGE_GDS':
				this.state.matrix 			= Gds[gds]['matrix'];
				this.state.sessionIndex 	= Gds[gds]['sessionIndex'];
				this.state.activeTerminal 	= Gds[gds]['activeTerminal'];
			break;

			case 'CHANGE_FONT_SIZE':
				// this.state.matrix 	= this.sessions[ sIndex ].matrix || { rows : 1, cells : 1 };
			break;

			case 'CHANGE_SESSION' :
				Gds[gds]['sessionIndex'] = this.state.sessionIndex;
				return Container.menuRender();
			break;

			case 'CHANGE_SESSION_BY_MENU' :
				let command = this.getSessionAreaMap()[params.sessionIndex];
				this.state.activeTerminal.exec( command );
				return false;
			break;

			case 'CHANGE_MATRIX' :
				localStorage.setItem('matrix', JSON.stringify(this.state.matrix) );
				Gds[gds]['matrix'] = this.state.matrix;
			break;

			case 'CHANGE_ACTIVE_TERMINAL' :
				Gds[gds]['activeTerminal'] = this.state.activeTerminal;
				return Container.menuRender();
			break;

			case 'CHANGE_PCC' :
				Gds[gds]['pcc'][this.state.sessionIndex] = params.pcc;
				return Container.menuRender();
			break;

			case 'PQ_MODAL_SHOW' :
				if (this.state.activeTerminal)
				{
					apiData.pqModal.show({
						reservationDumpClean : this.state.activeTerminal.get_output()
					});
				}

				return false;
			break;
		}

		Container.render( this.state );
	}
}

window.TerminalState = new TerminalState();

let resizeTimeout;

window.onresize = function() {

	if (resizeTimeout)
		clearInterval(resizeTimeout);

	resizeTimeout = setTimeout( () => {
		window.TerminalState.change({});
	}, 150 );
};

Context.init();