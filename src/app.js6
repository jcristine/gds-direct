'use strict';

import Container from './components/containerMain';
import Request	 from './helpers/requests';
import {KEEP_ALIVE_REFRESH, AREA_LIST} from './constants';

// console.log(KEEP_ALIVE_REFRESH)

const apiData = window.apiData || {};

const gdsSettings = {
	sessionIndex 	: 0,
	pcc				: {},
	matrix			: { rows: 1, cells : 1},
	activeTerminal	: null
};

const Gds = {
	'apollo': Object.assign({}, gdsSettings, {'sessionIndex' : AREA_LIST.indexOf(apiData.settings['gds']['apollo']['area']) }),
	'sabre'	: Object.assign({}, gdsSettings, {'sessionIndex' : AREA_LIST.indexOf(apiData.settings['gds']['sabre']['area']) })
};

// const KEEP_ALIVE_REFRESH = 60000;

class TerminalState
{
	constructor()
	{
		const saved		= localStorage.getItem('matrix');
		const curGds	= apiData.settings.common['currentGds'] || 'apollo';

		this.state = {
			gds 			: curGds,
			sessionIndex	: Gds[curGds]['sessionIndex'],

			matrix			: saved ? JSON.parse( saved ) : {rows : 1, cells : 1},
			language		: 'APOLLO',
			activeTerminal	: '',

			fontSize		: 1,
			hideMenu		: false,
			canAddPq		: false
		};

		setInterval( () => Request.get(`terminal/keepAlive?rId=${apiData.rId}&gds=${this.state.gds}`), KEEP_ALIVE_REFRESH );
	}

	getMatrix()
	{
		return this.state.matrix;
	}

	getPcc()
	{
		return Gds[this.state.gds].pcc;
	}

	getSessionAreaMap()
	{
		const key = this.state.gds === 'apollo' ? 'S': 'Â¤';
		return AREA_LIST.map( char => key + char );
	}

	getBuffer( gds, terminalId )
	{
		if ( apiData && apiData.buffer && apiData.buffer.gds && apiData.buffer.gds[gds] )
			return apiData.buffer['gds'][gds]['terminals'][terminalId];

		return false;
	}

	purgeScreens()
	{
		Container.purgeScreens( this.state.gds );
		Request.get(`terminal/clearBuffer?gds=${this.state.gds}&rId=${apiData.rId}`);
	}

	isLanguageApollo()
	{
		return this.state.language === 'APOLLO';
	}

	change( params = {}, action )
	{
		this.state = Object.assign( this.state, params );

		const gds = this.state.gds;

		switch (action)
		{
			case 'CHANGE_GDS':
				this.state.matrix 			= Gds[gds]['matrix'];
				this.state.sessionIndex 	= Gds[gds]['sessionIndex'];
				this.state.activeTerminal 	= Gds[gds]['activeTerminal'];
			break;

			case 'CHANGE_FONT_SIZE':
				// this.state.matrix 	= this.sessions[ sIndex ].matrix || { rows : 1, cells : 1 };
			break;

			case 'CHANGE_SESSION' :
				Gds[gds]['sessionIndex'] = this.state.sessionIndex;
				return Container.menuRender( this.state );
			break;

			case 'CHANGE_SESSION_BY_MENU' :
				let command = this.getSessionAreaMap()[params.sessionIndex];
				this.state.activeTerminal.exec( command );
				return false;
			break;

			case 'CHANGE_MATRIX' :
				localStorage.setItem('matrix', JSON.stringify(this.state.matrix) );
				Gds[gds]['matrix'] = this.state.matrix;
			break;

			case 'CHANGE_ACTIVE_TERMINAL' :
				// console.log(' change active terminal');

				if (Gds[gds]['activeTerminal'])
					Gds[gds]['activeTerminal'][0].parentNode.classList.remove('active');

				Gds[gds]['activeTerminal'] = this.state.activeTerminal;
				Gds[gds]['activeTerminal'][0].parentNode.classList.add('active');

				return Container.menuRender( this.state );
			break;

			case 'CHANGE_PCC' :
				Gds[gds]['pcc'][this.state.sessionIndex] = params.pcc;
				return Container.menuRender( this.state );
			break;

			case 'ACTIVATE_PQ' :
				return Container.menuRender( this.state );
			break;

			case 'PQ_MODAL_SHOW' :
				if (this.state.activeTerminal)
				{
					apiData.pqModal.show({
						onClose	: () => this.change({hideMenu: false})
					}).then( () => Container.render( this.state ) );
				}

				return false;
			break;
		}

		Container.render( this.state );
	}
}

// let optionsDefault 	= {};
// let xz 				= { zz : 1 };
// let test = { ...optionsDefault, visibilityFilter: 1 };
// console.log( test );
//

window.TerminalState = new TerminalState();

let resizeTimeout;

window.onresize = function() {

	if (resizeTimeout)
		clearInterval(resizeTimeout);

	resizeTimeout = setTimeout( () => window.TerminalState.change(), 150 );
};

Container.init( apiData['htmlRootId'] || 'rootTerminal' );
window.TerminalState.change({}, 'CHANGE_MATRIX');
