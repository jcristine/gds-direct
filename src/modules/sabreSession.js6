'use strict';

import { TIME_FORMAT, ACCOUNT } from '../constants';
import Requests 				from '../helpers/requests';

export default class Session
{
	constructor( params )
	{
		this.settings = params;
	}

	makeRequest( command, params )
	{
		return Requests.runSyncCommand( command, params );
	}
	
	start()
	{
		Requests.runSyncCommand('startSession',  {
			timeFormat	: TIME_FORMAT,
			account		: ACCOUNT
		})
			.then( function( response ) {
				// sessionToken = response['data']['sessionToken'];
				return response['data'];
			})
			.catch(function(err) {
				console.error('oh shit Error', err);
			});
	}

	run( params )
	{
		const rData = {
			// sessionToken	: this.settings['sessionToken'],

			sessionIndex	: parseInt(this.settings['sessionIndex']) + 1,
			terminalIndex	: parseInt(this.settings['terminalIndex']) + 1,

			command			: params['cmd'],

			gds				: this.settings['gds'],
			language		: window.TerminalState.state.language,

			terminalData	: window.apiData['terminalData']
		};

		return this.makeRequest( 'runCommand', rData );
		// return Requests.runSyncCommand('runCommand', );
	}

	end()
	{
		let result = Requests.runSyncCommand('endSession', {
			sessionToken: this.settings['sessionToken']
		});

		if (result['success'])
			return true;
	}

	clearBuffer()
	{
		return this.makeRequest( 'runInternalCommand', {
			command : 'clearBuffer'
		});
	}
}