'use strict';

import Helpers from '../helpers/helpers';

export default class Output
{
	constructor( terminal )
	{
		this.terminal		= terminal;

		this.context 		= document.createElement('div');
		this.emptyLines 	= 0;
		this.outputStrings	= '';
		this.cmdLineOffset 	= '';

		this.terminal.cmd().after( this.context );

		this.clearScreen 	= false;
	}

	prepare( output, clearScreen = false )
	{
		this.outputStrings 		= output;
		this.clearScreen		= clearScreen;

		// console.log( clearScreen );
		// console.log( this.emptyLines );
		// console.log( this.getOutputLength() );

		const noClearScreen	= () => this.emptyLines > 0 ? this.emptyLines - this.getOutputLength() : 0 ;
		const isClearScreen = () => this.terminal.rows() - this.getOutputLength() - 1;

		this.emptyLines 	= clearScreen ? isClearScreen() : noClearScreen();

		if (this.emptyLines < 0 )
			this.emptyLines = 0;

		// console.log('?????', this.emptyLines );

		this.printOutput().attachEmpty().scroll();
	}

	reset()
	{
		this.prepare( this.outputStrings, this.clearScreen );
	}

	attachEmpty()
	{
		this.context.innerHTML = '';

		if (this.emptyLines > 0 )
			this.context.innerHTML = new Array( this.emptyLines ).fill('<div><span>&nbsp;</span></div>').join('');

		return this;
	}

	getOutputLength()
	{
		return Helpers.getLines( this.outputStrings, this.terminal.cols() ).length;
	}

	printOutput()
	{
		this.cmdLineOffset 	= this.terminal.cmd()[0].offsetTop;
		// this.terminal.echo( this.outputStrings, {raw : 1});
		this.terminal.echo( this.outputStrings);
		return this;
	}

	scroll()
	{
		if (this.emptyLines === 0)
		{
			this.terminal.scroll().scroll( this.cmdLineOffset ); // to first line, to desired line //TEST
		} else
		{
			this.terminal.scroll_to_bottom(); // to first line, to desired line //TEST
			// this.terminal[0].scrollTop = this.terminal[0].scrollHeight;
		}
	}

	// addEmptyLines()
	// {
	// 	const emptyLines 		= this.countEmptyLines();
	// 	this.context.innerHTML 	= emptyHtml( emptyLines );
	//
	// 	return this;
	// }

	// countEmptyLines()
	// {
	// 	const outputCount 		= this.getOutputLength();
	// 	const rowsCount 		= this.terminal.rows();
	//
	// 	return this.emptyLines = rowsCount - outputCount - 1;
	// }

	// removeEmptyLines()
	// {
	// 	if ( this.context )
	// 	{
	// 		this.context.innerHTML	= '';
	// 		this.emptyLines 		= 0;
	// 	}
	//
	// 	return this;
	// }

	// reduceEmpty( lineCount )
	// {
	// 	if (this.emptyLines > 0)
	// 		this.emptyLines -= lineCount || this.getOutputLength();
	//
	// 	if ( this.emptyLines < 0 )
	// 		this.emptyLines = 0;
	//
	// 	return this;
	// }


}