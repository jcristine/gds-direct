'use strict';

import Helpers from '../helpers/helpers';

export default class Output
{
	constructor( terminal )
	{
		this.terminal		= terminal;

		this.context 		= document.createElement('div');
		this.emptyLines 	= 0;
		this.outputStrings	= '';
		this.cmdLineOffset 	= '';

		this.terminal.cmd().after( this.context );
	}

	removeEmptyLines()
	{
		if ( this.context )
		{
			this.context.innerHTML	= '';
			this.emptyLines 		= 0;
		}

		return this;
	}

	countEmptyLines()
	{
		const outputCount 	= this.getOutputLength();
		const rowsCount 	= this.terminal.rows();

		if (outputCount < rowsCount)
			this.emptyLines = rowsCount - outputCount - 1; // screen rows - output - cmdLine;

		return this;
	}

	getOutputLength()
	{
		return Helpers.getLines( this.outputStrings, this.terminal.cols() ).length;
	}

	printOutput()
	{
		this.cmdLineOffset 	= this.terminal.cmd()[0].offsetTop;

		// this.terminal.echo( this.outputStrings, {raw : 1});
		this.terminal.echo( this.outputStrings);

		// this.terminal.echo( this.outputStrings, {
		// 	finalize 	: function ( div ) {
		// 		div[0].innerHTML = $.terminal.escape_formatting( output );
		// 	}
		// } );
		return this;
	}

	reduceEmpty( lineCount )
	{
		if (this.emptyLines > 0)
			this.emptyLines -= lineCount || this.getOutputLength();

		if ( this.emptyLines < 0 )
			this.emptyLines = 0;

		return this;
	}

	attachEmpty()
	{
		if (this.emptyLines <= 0 )
			return this;

		this.context.innerHTML = new Array( this.emptyLines ).fill('<div><span>&nbsp;</span></div>').join('');

		return this;
	}

	prepare( output )
	{
		this.outputStrings 	= output;
	}

	scroll()
	{
		if (this.emptyLines === 0)
		{
			this.terminal.scroll().scroll( this.cmdLineOffset ); // to first line, to desired line //TEST
		} else
		{
			this.terminal.scroll_to_bottom(); // to first line, to desired line //TEST
		}
	}
}