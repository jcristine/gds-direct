'use strict';

import History 			from './popovers/history';
import TextSize 		from './popovers/textSize';
import Settings 		from './popovers/settings';
import SessionButtons	from './menu/sessionButtons';
import PqButton			from './menu/pqButton';
import Dom				from '../helpers/dom';

const context = Dom('aside.sideMenu');

let SettingsContext;

export default class MenuPanel
{
	static toggle()
	{
	}

	static fontSize()
	{
		return new TextSize({
			icon		: '<i class="fa fa-text-height t-f-size-14"></i>',
			onSelect	: value => { window.TerminalState.change({fontSize : value}) }
		}).getTrigger();
	}

	static history()
	{
		return new History({
			icon		: '<i class="fa fa-history t-f-size-14"></i>',
			onSelect	: value => window.TerminalState.execCmd( value )
		}).getTrigger();
	}

	static settings()
	{
		return new Settings({
			icon		: '<i class="fa fa-gears t-f-size-14"></i>',
			onSelect	: value => window.TerminalState.execCmd( value )
		}).getTrigger();
	}

	static activeSession( {gds, sessionIndex, activeTerminal} )
	{
		const defParams = { gds, sessionIndex, activeTerminal };

		defParams.onAreaChange 	= sessionIndex => {
			window.TerminalState.change( {sessionIndex}, 'CHANGE_SESSION_BY_MENU');
		};

		defParams.onGdsChange 	= gds => {
			window.TerminalState.change( {gds}, 'CHANGE_GDS');
		};

		const apollo 	= new SessionButtons( Object.assign( {}, defParams, {
			name : 'apollo',
			list : ['A', 'B', 'C', 'D', 'E']
		}));

		const sabre 	= new SessionButtons( Object.assign( {}, defParams, {
			name : 'sabre',
			list : ['A', 'B', 'C', 'D', 'E', 'F' ]
		}));

		const context 		= document.createElement('article');
		context.innerHTML 	= '<div class="label">Session</div>';

		context.appendChild( apollo.render() );
		context.appendChild( sabre.render() );

		return context;
	}

	static InputLanguage()
	{
		const context 	= document.createElement('article');

		context.innerHTML = '<div class="label">Input Language</div>';

		['APOLLO','SABRE'].forEach( value => {

			const button = Dom('button.btn btn-sm btn-gold font-bold' + ( window.TerminalState.state.language === value ? ' active' : '') );

			button.innerHTML = value;
			button.addEventListener('click', () => window.TerminalState.change({ language : value }) );

			context.appendChild( button );
		});

		return context;
	}

	static settingsButtons()
	{
		if (SettingsContext)
			return SettingsContext;

		SettingsContext	= document.createElement('article');

		[
			// MenuPanel.toggle(),
			MenuPanel.fontSize(),
			MenuPanel.history(),
			MenuPanel.settings()
		].map( button => SettingsContext.appendChild( button ) );

		return SettingsContext;
	}

	static getContext()
	{
		return context;
	}

	static render(params)
	{
		// console.log( 'zzz', params );

		// let start = new Date().getTime();
		// console.log(' re render ');
		context.innerHTML = '';

		context.appendChild( this.settingsButtons( params ) );
		context.appendChild( this.activeSession( params ) );
		context.appendChild( this.InputLanguage() );
		context.appendChild( PqButton.render( params ) );

		// console.log('draw done', new Date().getTime() - start);

		return context;
	}
}