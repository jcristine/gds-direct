'use strict';

import TerminalPlugin from '../middleware/terminal';

const calculateHeight = terminal => (terminal.find('.cursor').height() * terminal.rows() );

export default class Terminal {

	constructor( params )
	{
		this.plugin 				= null;
		this.settings 				= params;
		this.context 				= document.createElement('div');
		this.context.className 		= 'terminal';

		this.context.style.height	= this.settings.parentContext.clientHeight + 'px';
		this.context.style.width	= this.settings.parentContext.clientWidth + 'px';

		const backEndId = parseInt( this.settings['name'] ) + 1;
		this.buffer		= window.TerminalState.getBuffer(params.gds, backEndId );

		this.context.onclick = () => {
			if (!this.plugin)
				this.init();
		};

		if ( this.buffer )
			this.makeBuffer();

		this.settings.parentContext.appendChild( this.context );
		this.context.scrollTop = this.context.scrollHeight;
	}

	init()
	{
		this.plugin = new TerminalPlugin({
			context 		: this.context,
			name 			: this.settings['name'],
			sessionIndex 	: this.settings['sessionIndex'],
			gds 			: this.settings['gds']
		});

		this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
		this.plugin.terminal.scroll_to_bottom();
	}

	makeBuffer()
	{
		const buffered = this.buffer['buffering'].map( record => {
			return `<div class="command">${record.request}</div><pre>${record.output}</pre>`;
		}).join('');

		this.bufferDiv 				= document.createElement('div');
		this.bufferDiv.className	= 'terminal-wrapper';
		this.bufferDiv.innerHTML 	= `<div class="terminal-output">${buffered}</div>`;

		this.context.appendChild( this.bufferDiv );
	}
	//
	// insertBuffer()
	// {
	// 	if ( !this.buffer )
	// 		return false;
	//
	// 	this.buffer['buffering'].forEach( (record) => {
	// 		this.plugin.terminal.echo(record.request, { finalize : function ( div ) {
	// 			div[0].className = 'command';
	// 		}});
	//
	// 		this.plugin.terminal.echo(record.output);
	// 	});
	// }
	
	// destroy()
	// {
	// 	if (this.plugin)
	// 		this.plugin.getPlugin().destroy();
	// }

	reattach( parentNode )
	{
		this.settings.parentContext = parentNode;

		this.context.style.height	= this.settings.parentContext.clientHeight + 'px';
		this.context.style.width	= this.settings.parentContext.clientWidth + 'px';

		this.settings.parentContext.appendChild( this.context );

		if (this.plugin)
		{
			this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
			this.plugin.resize();
		} else
		{
			this.context.scrollTop = this.context.scrollHeight;
		}
	}

	clear()
	{
		if (this.plugin)
		{
			this.plugin.terminal.clear();
			this.plugin.terminal.cmd().set('');
		}

		if (this.bufferDiv)
		{
			this.context.removeChild(this.bufferDiv);
			this.bufferDiv = false;
		}

		this.buffer = '';
	}
}