'use strict';

import TerminalPlugin	from '../middleware/terminal';
import Dom				from '../helpers/dom';

require('../../node_modules/jquery.terminal/js/unix_formatting');

// const calculateHeight = terminal => (terminal.find('.cursor').height() * terminal.rows());

export default class Terminal {

	constructor( params )
	{
		this.plugin 				= null;
		this.settings 				= params;
		this.context 				= Dom('div.terminal');

		this.makeBuffer( params.buffer );
		this.context.onclick = () => { if (!this.plugin) this.init(); };
	}

	init()
	{
		this.plugin = new TerminalPlugin({
			context 		: this.context,
			name 			: this.settings['name'],
			sessionIndex 	: this.settings['sessionIndex'],
			gds 			: this.settings['gds']
		});

		// this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
		// this.plugin.terminal.scroll_to_bottom();
	}

	makeBuffer( buf )
	{
		if (!buf)
			return false;

		const buffered = buf['buffering'].map( record => {
			return `<div class="command">${record.command}</div><pre style="white-space: pre-wrap; overflow: hidden">${record.output}</pre>`;
		}).join('');

		this.bufferDiv 				= Dom('article.terminal-wrapper');
		this.bufferDiv.innerHTML 	= `<div class="terminal-output">${$.terminal.format( buffered )}</div>`;

		this.context.appendChild( this.bufferDiv );
	}

	//
	// insertBuffer()
	// {
	// 	if ( !this.buffer )
	// 		return false;
	//
	// 	this.buffer['buffering'].forEach( (record) => {
	// 		this.plugin.terminal.echo(record.request, { finalize : function ( div ) {
	// 			div[0].className = 'command';
	// 		}});
	//
	// 		this.plugin.terminal.echo(record.output);
	// 	});
	// }

	getLineHeight()
	{
		const tempCmd 		= Dom('div.terminal-wrapper');
		tempCmd.innerHTML 	= '<div class="cmd"><span class="cursor">&nbsp;</span></div>';

		this.context.appendChild( tempCmd );

		const cursor = tempCmd.querySelector('.cursor');
		const height = cursor.clientHeight;

		this.context.removeChild( tempCmd );

		return height;
	}

	calculateHeight()
	{
		const getLineHeight = this.getLineHeight();
		const rowsNumber 	= Math.floor( this.settings.parentContext.clientHeight / getLineHeight );

		return getLineHeight * rowsNumber;
	}

	reattach( parentNode, dimensions )
	{
		// console.log(' ratach ', dimensions);

		this.settings.parentContext = parentNode;

		parentNode.style.height		= dimensions.height + 'px';
		// parentNode.style.width		= dimensions.width	+ 'px';

		this.context.style.height	= parentNode.clientHeight	+ 'px';
		this.context.style.width	= parentNode.clientWidth	+ 'px';

		if (this.plugin)
		{
			this.plugin.resize();
		}

		this.settings.parentContext.appendChild( this.context );
		this.context.style.height = this.calculateHeight() + 'px';

		if (this.plugin)
		{
			this.plugin.emptyLinesRecalculate();
		}

		this.context.scrollTop = this.context.scrollHeight;
	}

	clear()
	{
		if (this.plugin)
		{
			this.plugin.terminal.clear();
			this.plugin.terminal.cmd().set('');
		}

		if (this.bufferDiv)
		{
			this.context.removeChild(this.bufferDiv);
			this.bufferDiv = false;
		}

		this.buffer = '';
	}
}