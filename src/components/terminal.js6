'use strict';

import TerminalPlugin	from '../middleware/terminal';
import Dom				from '../helpers/dom';
import Helper			from '../helpers/helpers';

require('../../node_modules/jquery.terminal/js/unix_formatting');

const calculateHeight = terminal => (terminal.find('.cursor').height() * terminal.rows());

export default class Terminal {

	constructor( params )
	{
		this.plugin 				= null;
		this.settings 				= params;
		this.context 				= Dom('div.terminal');

		this.makeBuffer( params.buffer );
		this.context.onclick = () => { if (!this.plugin) this.init(); };
	}

	init()
	{
		this.plugin = new TerminalPlugin({
			context 		: this.context,
			name 			: this.settings['name'],
			sessionIndex 	: this.settings['sessionIndex'],
			gds 			: this.settings['gds']
		});

		this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
		this.plugin.terminal.scroll_to_bottom();
	}

	makeBuffer( buf )
	{
		if (!buf)
			return false;

		/*const buffered = buf['buffering'].map( record => {

			const output = $.terminal.split_equal( record.output ).map( str => `<div style="width: 100%">${ $.terminal.overtyping(str) }</div>`).join('');

			// console.log( $.terminal.split_equal( record.output ) );
			// const output = $.terminal.format( record.output )
			// console.log( output )

			return `<div class="command">${record.request}</div>${output}`;
			// return `<div class="command">${record.request}</div><pre>${record.output}</pre>`;
			//return `<div class="command">${record.request}</div>${output}`;
			// return `<div class="command">${record.request}</div> ${ $.terminal.format( record.output ) } `;
		}).join('');*/


		const buffered = buf['buffering'].map( record => {
			return `<div class="command">${record.request}</div><pre>${record.output}</pre>`;
		}).join('');

		this.bufferDiv 				= Dom('article.terminal-wrapper');
		this.bufferDiv.innerHTML 	= `<div class="terminal-output">${$.terminal.format( buffered )}</div>`;

		this.context.appendChild( this.bufferDiv );
	}

	//
	// insertBuffer()
	// {
	// 	if ( !this.buffer )
	// 		return false;
	//
	// 	this.buffer['buffering'].forEach( (record) => {
	// 		this.plugin.terminal.echo(record.request, { finalize : function ( div ) {
	// 			div[0].className = 'command';
	// 		}});
	//
	// 		this.plugin.terminal.echo(record.output);
	// 	});
	// }
	
	// destroy()
	// {
	// 	if (this.plugin)
	// 		this.plugin.getPlugin().destroy();
	// }

	reattach( parentNode )
	{
		// let cursor, cursorWrap;

		this.settings.parentContext = parentNode;

		if (this.plugin)
		{
			// console.log(terminal.find('.cursor').height() * terminal.rows());
			// this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';

			this.plugin.resize();
			// this.plugin.terminal.scroll_to_bottom();
		}
		else
		{
			/*cursorWrap 			= Dom('div.cmd');
			cursor 				= Dom('span.cursor');
			cursor.innerHTML 	= '&nbsp;';

			cursorWrap.appendChild( cursor );
			this.context.appendChild( cursorWrap );*/

			this.context.style.height	= parentNode.clientHeight 	+ 'px';
			this.context.style.width	= parentNode.clientWidth 	+ 'px';
		}

		this.settings.parentContext.appendChild( this.context );

		// if (cursor)
		// {
			// const h =  Math.floor( parentNode.clientHeight / cursor.clientHeight );
			// this.context.style.height = (cursor.clientHeight * h)  + 'px';
			//
			// cursorWrap.parentNode.removeChild( cursorWrap );

		this.context.scrollTop = this.context.scrollHeight;
		// }
	}

	resize( dimensions )
	{
		// this.settings.parentContext.style.height	= dimensions.height + 'px';
		// this.settings.parentContext.style.width		= dimensions.width 	+ 'px';
		// this.context.style.height	= this.settings.parentContext.clientHeight 	+ 'px';
		// this.context.style.width	= this.settings.parentContext.clientWidth 	+ 'px';

		if (this.plugin)
		{
			// this.plugin.resize( dimensions.width, dimensions.height );

			this.plugin.resize();

			this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
			this.plugin.terminal.scroll_to_bottom();
		}

		else
		{
			/*this.settings.parentContext.style.height	= dimensions.height + 'px';
			this.settings.parentContext.style.width		= dimensions.width 	+ 'px';

			this.context.style.height	= this.settings.parentContext.clientHeight 	+ 'px';
			this.context.style.width	= this.settings.parentContext.clientWidth 	+ 'px';*/

			this.context.scrollTop = this.context.scrollHeight;
		}
	}

	clear()
	{
		if (this.plugin)
		{
			this.plugin.terminal.clear();
			this.plugin.terminal.cmd().set('');
		}

		if (this.bufferDiv)
		{
			this.context.removeChild(this.bufferDiv);
			this.bufferDiv = false;
		}

		this.buffer = '';
	}
}