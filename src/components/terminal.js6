'use strict';

import TerminalPlugin	from '../middleware/terminal';
import Dom				from '../helpers/dom';

require('../../node_modules/jquery.terminal/js/unix_formatting');

// const calculateHeight = terminal => (terminal.find('.cursor').height() * terminal.rows());

export default class Terminal {

	constructor( params )
	{
		this.plugin 				= null;
		this.settings 				= params;
		this.context 				= Dom('div.terminal');

		this.makeBuffer( params.buffer );
		this.context.onclick = () => { if (!this.plugin) this.init(); };
	}

	init()
	{
		// this.context.innerHTML = '';

		this.plugin = new TerminalPlugin({
			context 		: this.context,
			name 			: this.settings['name'],
			sessionIndex 	: this.settings['sessionIndex'],
			gds 			: this.settings['gds'],
			numOfRows 		: this.numOfRows
		});

		// this.insertBuffer();
	}

	makeBuffer( buf )
	{
		if (!buf)
			return false;

		const buffered = buf['buffering'].map( record => {
			return `<div class="command">${record.command}</div><pre style="white-space: pre-wrap; overflow: hidden">${record.output}</pre>`;
			// return `<div class="command">${record.command}</div><div>${record.output}</div>`;
		}).join('');

		this.bufferDiv 				= Dom('article.terminal-wrapper');
		this.bufferDiv.innerHTML 	= `<div class="terminal-output">${$.terminal.format( buffered )}</div>`;

		this.context.appendChild( this.bufferDiv );
	}

	insertBuffer()
	{
		if ( !this.settings.buffer )
			return false;

		this.settings.buffer['buffering'].forEach( (record) => {
			this.plugin.terminal.echo(record.command, { finalize : function ( div ) {
				div[0].className = 'command';
			}});

			this.plugin.terminal.echo(record.output);
		});
	}

	calculateNumOfRows( lineHeight )
	{
		return Math.floor( this.settings.parentContext.clientHeight / lineHeight );
	}

	reattach( parentNode, dimensions )
	{
		// console.log(' ratach ', dimensions);

		this.settings.parentContext = parentNode;

		// this.calculateNumOfRows(this.settings.char.)

		parentNode.style.height		= dimensions.height + 'px';

		parentNode.style.width		= dimensions.width	+ 'px';
		// parentNode.style.maxWidth	= dimensions.width	+ 'px';

		this.context.style.height	= parentNode.clientHeight	+ 'px';
		this.context.style.width	= (parentNode.clientWidth - 1)	+ 'px';
		// this.context.style.maxWidth	= parentNode.clientWidth	+ 'px';

		/*console.log('dimen', dimensions.width);
		console.log('dimen', parentNode.clientWidth);
		console.log('dimen', parentNode.offsetWidth);*/

		// console.log( 'zz', dimensions )

		const numOfRows 	= this.calculateNumOfRows( dimensions.char.height );
		let isEqual			= JSON.stringify(dimensions) === JSON.stringify(this.settings.dimensions);

		// console.log( 'is?', isEqual );
		// console.log('numOfChars ', dimensions.char.width );
		// console.log('numOfChars ', numOfChars );
		// console.log('numOfChars width ', parentNode.clientWidth );
		// console.log('numOfChars width ', this.context.clientWidth );
		// console.log('numOfChars ', '===' );

		this.numOfRows = numOfRows;

		// isEqual = true;

		if (!isEqual && this.plugin)
		{
			console.log("RESIZE");
			this.plugin.resize();
		}

		this.context.style.height = (numOfRows * dimensions.char.height ) + 'px';
		this.settings.parentContext.appendChild( this.context );

		const numOfChars	= Math.floor( this.context.clientWidth / dimensions.char.width );

		// console.log(numOfChars);
		// console.log( 'numOfChars', parentNode.clientWidth );
		// console.log( 'numOfChars', this.context.clientWidth );
		// console.log( 'numOfChars', this.context.style.width);
		// console.log('numOfChars width !!', this.context.clientWidth );

		if (!isEqual && this.plugin)
		{
			// console.log( 'recalculate' );
			// console.log( 'numOfChars', numOfChars )
			this.plugin.emptyLinesRecalculate( numOfRows, numOfChars );
		}

		this.context.scrollTop = this.context.scrollHeight;
		this.settings.dimensions = dimensions;
	}

	clear()
	{
		if (this.plugin)
		{
			this.plugin.terminal.clear();
			this.plugin.terminal.cmd().set('');
		}

		if (this.bufferDiv)
		{
			this.context.removeChild(this.bufferDiv);
			this.bufferDiv = false;
		}

		this.buffer = '';
	}
}