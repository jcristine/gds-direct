'use strict';

import TerminalPlugin from '../middleware/terminal';

const calculateHeight =  terminal => (terminal.find('.cursor').height() * terminal.rows() );

export default class Terminal {

	constructor( params )
	{
		this.plugin 				= null;
		this.settings 				= params;
		this.context 				= document.createElement('div');
		this.context.className 		= 'terminal';

		this.context.style.height	= this.settings.parentContext.clientHeight + 'px';
		this.context.style.width	= this.settings.parentContext.clientWidth + 'px';

		const backEndId = parseInt( this.settings['name'] ) + 1;
		this.buffer		= window.TerminalState.getBuffer(params.gds, backEndId );

		this.context.onclick = () => {
			if (!this.plugin)
				this.init();
		};

		if ( this.buffer )
		{
			const buffered = this.buffer['buffering'].map( (record) => {
				return `<div class="command">${record.request}</div> <pre zstyle="white-space: pre-line">${record.output}</pre>`;
			}).join('');

			this.context.innerHTML = `<div class="terminal-wrapper"><div class="terminal-output">${buffered}</div></div>`;
			this.context.scrollTop = this.context.scrollHeight;
		}

		this.settings.parentContext.appendChild( this.context );
	}

	init()
	{
		// this.context.innerHTML = '';

		this.plugin = new TerminalPlugin({
			context 		: this.context,
			name 			: this.settings['name'],
			sessionIndex 	: this.settings['sessionIndex'],
			gds 			: this.settings['gds']
		});

		this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
		this.plugin.terminal.scroll_to_bottom();

		// this.insertBuffer();
	}

	insertBuffer()
	{
		if ( !this.buffer )
			return false;

		this.buffer['buffering'].forEach( (record) => {
			this.plugin.terminal.echo(record.request, { finalize : function ( div ) {
				div[0].className = 'command';
			}});

			this.plugin.terminal.echo(record.output);
		});
	}
	
	destroy()
	{
		if (this.plugin)
			this.plugin.getPlugin().destroy();
	}

	// detach()
	// {
	// 	console.log(' detach ', this);
	// }

	reattach( parentNode )
	{
		this.settings.parentContext = parentNode;

		this.context.style.height	= this.settings.parentContext.clientHeight + 'px';
		this.context.style.width	= this.settings.parentContext.clientWidth + 'px';

		this.settings.parentContext.appendChild( this.context );

		if (this.plugin)
		{
			this.plugin.getPlugin().resize().scroll_to_bottom();
			this.context.style.height = calculateHeight(this.plugin.terminal) + 'px';
		} else
		{
			this.context.scrollTop = this.context.scrollHeight;
		}
	}

	clear()
	{
		if (this.plugin)
		{
			this.plugin.terminal.clear();
			this.plugin.terminal.cmd().set('');
		} else
		{
			this.context.innerHTML = '';
		}

		this.buffer = '';
	}
}