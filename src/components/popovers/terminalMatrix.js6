'use strict';

import Drop from 'tether-drop';

let popContext;
let cellObj = [];

const ACTIVE_CLASS = 'bg-purple';

export default class Matrix
{
	constructor( params )
	{
		this.context 			= document.createElement('table');
		this.context.className	= 'matrix-table';

		this.settings = params;

		params['button'].onclick = () => {
			this.build();

			popContext = new Drop({
				target		: params['button'],
				content		: this.getContext(),
				classes		: 'drop-theme-arrows',
				position	: 'bottom center',
				openOn		: 'click'
			});

			params['button'].onclick = false;
			params['button'].click();
		}
	}

	getContext()
	{
		return this.context;
	}

	build()
	{
		[0, 1, 2, 3]
			.map( this._rows )
			.map( this._cells, this )
			.map( this._toTable, this );
	}

	_rows()
	{
		cellObj.push([]);
		return document.createElement('tr');
	}

	_cells( row, rIndex )
	{
		[0, 1, 2, 3].map( cIndex => {
			row.appendChild( this._cell( rIndex, cIndex) );
		});

		return row;
	}

	_cell( rIndex, cIndex)
	{
		const cell = document.createElement('td');

		cellObj[rIndex].push(cell);

		cell.addEventListener( 'click', () => {
			popContext.close();

			window.TerminalState.change({
				matrix : {
					rows 	: rIndex,
					cells	: cIndex
				}
			}, 'CHANGE_MATRIX');
		});

		cell.addEventListener('mouseover', () => {

			for ( let i = 0; i <= rIndex; i++ )
			{
				cellObj[i].slice(0, cIndex + 1 ).forEach( cell => cell.classList.toggle(ACTIVE_CLASS) )
			}

		});

		cell.addEventListener('mouseleave', () => {
			[].forEach.call( this.context.querySelectorAll( '.' + ACTIVE_CLASS) , cell => cell.classList.toggle(ACTIVE_CLASS) );
		});

		return cell;
	}

	_toTable( row )
	{
		this.context.appendChild( row );
	}
}