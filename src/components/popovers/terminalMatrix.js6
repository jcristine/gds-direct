'use strict';

import Drop from 'tether-drop';

let popContext;
let cellObj = [];

const ACTIVE_CLASS = 'bg-purple';

class Matrix
{
	constructor( params )
	{
		this.context 			= document.createElement('table');
		this.context.className	= 'matrix-table';

		this.settings = params;

		popContext = new Drop({
			target		: params['button'],
			content		: this.getContext(),
			classes		: 'drop-theme-arrows',
			position	: 'bottom center',
			openOn		: 'click'
		});
	}

	makeRow( rowIndex )
	{
		let row 		= document.createElement('tr');
		this.context.appendChild( row );

		cellObj.push([]);

		[ 0, 1, 2, 3 ].map((index) => {
			return row.appendChild(
				this.makeCell( index, rowIndex )
			)
		});
	}

	makeCell( cellIndex, rowIndex )
	{
		const cell = document.createElement('td');

		cellObj[rowIndex].push(cell);

		cell.addEventListener( 'click', () => {
			popContext.close();

			window.TerminalState.change({
				matrix : {
					rows 	: rowIndex,
					cells	: cellIndex
				}
			}, 'CHANGE_MATRIX');
		});

		cell.addEventListener('mouseover', () => {
			for ( let i = 0; i <= rowIndex; i++ )
			{
				cellObj[i].slice(0, cellIndex + 1 ).forEach( (cell) => {
					cell.classList.toggle(ACTIVE_CLASS);
				})
			}
		});

		cell.addEventListener('mouseleave', () => {
			[].forEach.call( this.context.querySelectorAll( '.' + ACTIVE_CLASS) , ( cell ) => {
				cell.classList.toggle(ACTIVE_CLASS);
			});
		});

		return cell;
	}

	build()
	{
		[ 0, 1, 2, 3].map( this.makeRow , this )
	}

	getContext()
	{
		return this.context;
	}
}

export default Matrix;