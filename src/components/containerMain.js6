'use strict';

import Terminal 	from './terminal';
import ActionsMenu 	from './actionsMenu';
import MenuPanel 	from './menuPanel';
import Dom			from '../helpers/dom';

class TerminalsMatrix
{
	static makeRow()
	{
		return document.createElement('tr');
	}

	static clear()
	{
		this.context.innerHTML = '';
		return this;
	}

	static getDimension( rowCount, cellCount )
	{
		let parent = this.context.parentNode;

		return {
			height	: Math.floor(parent.clientHeight / rowCount),
			width 	: Math.floor(parent.clientWidth / cellCount)
		}
	}

	static makeCells( rowCount, cellCount )
	{
		let resCells 	= [];

		rowCount++;
		cellCount++;

		this.dimensions = this.getDimension(rowCount, cellCount);

		const makeCells = row => {

			const makeCell = () => {
				return Dom('td.v-middle');
			};

			[ ...new Array(cellCount) ].map(makeCell).forEach( (cell) => {
				row.appendChild(cell);
				resCells.push(cell);
			});

			return row;
		};

		[ ...new Array(rowCount) ]
			.map( this.makeRow )
			.map( makeCells )
			.map( row => this.context.appendChild(row) );

		this.resCells = resCells;
		return this;
	}

	static appendTerminals( params )
	{
		this.resCells.forEach(( cell, index ) => {

			if( params.activeTerminal && index === params.activeTerminal.name() )
			{
				cell.classList.add('active');
			}

			gdsSession[ gdsKey ][index] = gdsSession[ gdsKey ][index] || new Terminal({
				name 			: index,
				sessionIndex	: params.sessionIndex,
				gds				: params.gds,
				buffer			: window.TerminalState.getBuffer( gdsKey, index + 1 )
			});

			gdsSession[ gdsKey ][index].reattach( cell , this.dimensions);
		});
	}
}

TerminalsMatrix.context = Dom('table.terminals-table');

let gdsSession = [], termTableWrap, RightSide, LeftSide, matrix = {}, gdsKey;


export default class Container {

	static init( rootId )
	{
		const Root = document.getElementById( rootId );

		this.createWrapper();

		Root.appendChild( this.context );

		window.TerminalState.change({}, 'CHANGE_MATRIX');
	}

	static createWrapper()
	{
		this.context 	= Dom('section.terminal-wrap-custom');
		termTableWrap 	= Dom('div.term-body minimized');

		LeftSide 		= Dom('aside.t-d-cell left');
		RightSide 		= Dom('aside.t-d-cell menu');

		this.context.appendChild( termTableWrap );

		termTableWrap.appendChild( LeftSide );
		termTableWrap.appendChild( RightSide );

		RightSide.appendChild( MenuPanel.getContext() );
		LeftSide.appendChild( TerminalsMatrix.context );

		LeftSide.appendChild( ActionsMenu.init().getContext() );
	}

	static purgeScreens()
	{
		gdsSession[ gdsKey ].forEach( terminal => { terminal.clear(); });
	}

	static hasMatrixChanged( newMatrix )
	{
		return JSON.stringify(newMatrix) !== JSON.stringify(matrix)
	}

	static resizeScreens( dimensions )
	{
		gdsSession[ gdsKey ].forEach( terminal => terminal.resize( dimensions ) );
	}

	static menuRender( {canAddPq : canAddPq} )
	{
		MenuPanel.render( { canAddPq } );
	}

	static gdsHasChanged( gds )
	{
		return this.gds !== gds;
	}

	static render( params )
	{
		gdsKey = params['gds'];

		gdsSession[ gdsKey ] = gdsSession[ gdsKey ] || [];

		RightSide.classList.toggle('hidden', params.hideMenu );

		// const  { canAddPq : canAddPq } = params;

		this.menuRender(params);

		const { rows : rowIndex , cells: cellIndex} = params.matrix;

		/*if ( this.hasMatrixChanged( params.matrix ) )
		{
			matrix = Object.assign( {}, params.matrix);
		}
		else
		{
			this.resizeScreens( TerminalsMatrix.getDimension(rowIndex + 1 , cellIndex + 1, this.context) );
			return false;
		}*/

		if ( this.gdsHasChanged( params.matrix ) )
		{
			this.gds 				= gdsKey;
			termTableWrap.className = `term-body minimized ${gdsKey}`; // change gds styles
		}

		// TerminalsMatrix.clear();
		// const dimensions = TerminalsMatrix.getDimension(rowIndex + 1 , cellIndex + 1);
		// console.log(dimensions, 'dimensions');

		TerminalsMatrix
			.clear()
			.makeCells(rowIndex, cellIndex)
			.appendTerminals( params );
	}
}