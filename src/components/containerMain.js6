'use strict';

import Terminal 	from './terminal';
import ActionsMenu 	from './actionsMenu';
import MenuPanel 	from './menuPanel';
import Dom			from '../helpers/dom';

let gdsSession = [];

class TerminalsMatrix
{
	static makeRow()
	{
		return document.createElement('tr');
	}

	static clear()
	{
		this.context.innerHTML = '';
		return this;
	}

	static getDimension( rowCount, cellCount )
	{
		const parent = this.context.parentNode;

		return {
			height	: Math.floor(parent.clientHeight / rowCount),
			width 	: Math.floor(parent.clientWidth / cellCount)
		}
	}

	static makeCells({rows : rowCount, cells : cellCount})
	{
		let resCells 	= [];

		rowCount++;
		cellCount++;

		this.dimensions = this.getDimension(rowCount, cellCount);

		const makeCells = row => {

			const makeCell = () => {
				return Dom('td.v-middle');
			};

			[ ...new Array(cellCount) ].map(makeCell).forEach( (cell) => {
				row.appendChild(cell);
				resCells.push(cell);
			});

			return row;
		};

		[ ...new Array(rowCount) ]
			.map( this.makeRow )
			.map( makeCells )
			.map( row => this.context.appendChild(row) );

		this.resCells = resCells;

		this.context.className = 'terminals-table ' + 't-matrix-w-' + ( cellCount - 1 );

		return this;
	}

	static appendTerminals({sessionIndex, gds, activeTerminal})
	{
		gdsSession[ gds ] = gdsSession[ gds ] || [];

		this.resCells.forEach(( cell, index ) => {

			if( activeTerminal && index === activeTerminal.name() )
			{
				cell.classList.add('active');
			}

			gdsSession[ gds ][index] = gdsSession[ gds ][index] || new Terminal({
				name 			: index,
				sessionIndex	: sessionIndex,
				gds				: gds,
				buffer			: window.TerminalState.getBuffer( gds, index + 1 )
			});

			// draw or redraw
			gdsSession[ gds ][index].reattach( cell , this.dimensions );
		});
	}

	static purgeScreens( gds )
	{
		gdsSession[ gds ].forEach( terminal => { terminal.clear(); });
	}
}

TerminalsMatrix.context = Dom('table.terminals-table');



class RightMenu
{
	static init()
	{
		this.context = Dom('aside.t-d-cell menu');
		this.context.appendChild( MenuPanel.getContext() );
	}

	static render({canAddPq, hideMenu})
	{
		MenuPanel.render({canAddPq});
		this.context.classList.toggle('hidden', hideMenu );
	}

	static getContext()
	{
		return this.context;
	}
}

class Wrapper
{
	static init()
	{
		this.context = Dom('div.term-body minimized');
		this.context.appendChild( MenuPanel.getContext() );

		const LeftSide 	= Dom('aside.t-d-cell left');
		LeftSide.appendChild( TerminalsMatrix.context );
		LeftSide.appendChild( ActionsMenu.init().getContext() );

		RightMenu.init();
		this.context.appendChild( LeftSide );
		this.context.appendChild( RightMenu.getContext() );
	}

	static render({gds, hideMenu, canAddPq})
	{
		if ( this.gds !== gds )
		{
			this.gds 				= gds;
			this.context.className = `term-body minimized ${gds}`; // change gds styles
		}

		RightMenu.render({ hideMenu, canAddPq });
	}

	static getContext()
	{
		return this.context;
	}
}

export default class Container {

	static init( rootId )
	{
		const Root = document.getElementById( rootId );

		Wrapper.init();

		const context = Dom('section.terminal-wrap-custom');
		context.appendChild( Wrapper.getContext() );

		Root.appendChild( context );
	}

	static purgeScreens( gds )
	{
		TerminalsMatrix.purgeScreens( gds );
	}

	static menuRender({canAddPq, hideMenu})
	{
		RightMenu.render({
			canAddPq,
			hideMenu
		});
	}

	static render( params )
	{


		Wrapper.render({
			gds 		: params.gds,
			hideMenu 	: params.hideMenu,
			canAddPq 	: params.canAddPq
		});

		TerminalsMatrix
			.clear()
			.makeCells( params.matrix )
			.appendTerminals( params );
	}
}