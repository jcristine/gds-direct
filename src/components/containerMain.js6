'use strict';

import Terminal 	from './terminal';
import ActionsMenu 	from './actionsMenu';
import MenuPanel 	from './menuPanel';
import Dom			from '../helpers/dom';


class TerminalsMatrix
{
	static makeRow()
	{
		return document.createElement('tr');
	}

	static clear()
	{
		this.context.innerHTML = '';
		return this;
	}

	static getDimension( rowCount, cellCount, container = false )
	{
		// console.log( this.context.parentNode.clientWidth );

		let parent = this.context.parentNode;

		if (container)
		{
			// console.log('?');
			parent = container;
		}

		return {
			height	: Math.floor(parent.clientHeight / rowCount),
			width 	: Math.floor(parent.clientWidth / cellCount)
		}
	}

	static makeCells( rowCount, cellCount )
	{
		let resCells 	= [];

		rowCount++;
		cellCount++;

		const { height, width } = this.getDimension(rowCount, cellCount);

		const makeCells = row => {

			const makeCell = () => {
				const cell 			= Dom('td.v-middle');
				cell.style.height 	= height + 'px';
				cell.style.width 	= width + 'px';

				return cell;
			};

			[ ...new Array(cellCount) ].map(makeCell).forEach( (cell) => {
				row.appendChild(cell);
				resCells.push(cell);
			});

			return row;
		};

		[ ...new Array(rowCount) ]
			.map( this.makeRow )
			.map( makeCells )
			.map( row => this.context.appendChild(row) );

		return resCells;
	}
}

TerminalsMatrix.context = '';

let inSession = [], terminalList = [], termTableWrap, RightSide, LeftSide, matrix = {};


export default class Container {

	static init( rootId )
	{
		const Root = document.getElementById( rootId );

		this.createWrapper();

		Root.appendChild( this.context );

		window.TerminalState.change({}, 'CHANGE_MATRIX');
	}

	static createWrapper()
	{
		this.context 	= Dom('section.terminal-wrap-custom');
		termTableWrap 	= Dom('div.term-body minimized');

		LeftSide 		= Dom('aside.t-d-cell left');
		RightSide 		= Dom('aside.t-d-cell menu');

		this.context.appendChild( termTableWrap );

		termTableWrap.appendChild( LeftSide );
		termTableWrap.appendChild( RightSide );

		RightSide.appendChild( MenuPanel.getContext() );

		TerminalsMatrix.context = Dom('table.terminals-table');

		LeftSide.appendChild( TerminalsMatrix.context );

		ActionsMenu.init();
		LeftSide.appendChild( ActionsMenu.getContext() );
	}

	static purgeScreens()
	{
		terminalList.forEach( terminal => { terminal.clear(); });
	}

	static resizeScreens( dimensions )
	{
		terminalList.forEach( terminal => terminal.resize( dimensions ) );
	}

	static menuRender()
	{
		MenuPanel.render();
	}

	static hasMatrixChanged( newMatrix )
	{
		return JSON.stringify(newMatrix) !== JSON.stringify(matrix)
	}

	static gdsHasChanged( gds )
	{
		return this.gds !== gds;
	}

	static render( params )
	{
		const sessionKey = params['gds'];
		RightSide.classList.toggle('hidden', !!params.hideMenu);

		this.menuRender();

		const { rows : rowIndex , cells: cellIndex} = params.matrix;

		if ( this.hasMatrixChanged( params.matrix ) )
		{
			matrix = Object.assign( {}, params.matrix);
		}
		else
		{
			// console.log( document.getElementById(terminalContext) )
			// console.log( this.context.clientWidth );

			this.resizeScreens( TerminalsMatrix.getDimension(rowIndex + 1 , cellIndex + 1, this.context) );
			return false;
		}

		if ( this.gdsHasChanged( params.matrix ) )
		{
			this.gds 				= sessionKey;
			termTableWrap.className = `term-body minimized ${sessionKey}`; // change gds styles
		}

		terminalList = inSession[ sessionKey ] || [];

		TerminalsMatrix
			.clear()
			.makeCells(rowIndex, cellIndex)
			.forEach(( cell, index ) => {

				terminalList[index] = terminalList[index] || new Terminal({
					name 			: index,
					sessionIndex	: params.sessionIndex,
					gds				: params.gds,
					buffer			: window.TerminalState.getBuffer( sessionKey, index + 1 )
				});

				terminalList[index].reattach( cell );
			});

		inSession[ sessionKey ] = terminalList;
	}
}