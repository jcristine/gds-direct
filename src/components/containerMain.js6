'use strict';

import Terminal 	from './terminal';
import ActionsMenu 	from './actionsMenu';
import MenuPanel 	from './menuPanel';

let inSession = [], terminalList = [], Root, termTableWrap;

const TerminalCellMatrix = (function()
{
	let context;

	function constructor()
	{
		context = document.createElement('table');
	}

	function makeRow()
	{
		let row 			= document.createElement('tr');
		context.appendChild( row );

		return row;
	}

	function makeCell( row, rowCount )
	{
		let cell 		= document.createElement('td');
		cell.className 	= 'v-middle';
		let height		= termTableWrap.clientHeight / ( parseInt(rowCount) + 1 );

		row.appendChild( cell );
		cell.style.height = Math.floor(height)+ 'px';

		return cell;
	}

	function _draw( rowIndex, cellIndex )
	{
		context.classList = ( ' t-matrix-w-' + cellIndex );

		let row, cells = [];

		for (let i = 0; i<= rowIndex; i++ )
		{
			row = makeRow();

			for (let y = 0; y <= cellIndex; y++ )
			{
				cells.push( makeCell(row, rowIndex) );
			}
		}

		return cells;
	}

	function _getContext()
	{
		return context;
	}

	function _clear()
	{
		context.innerHTML = '';
	}

	constructor();

	return {
		getCells	: _draw,
		clear 		: _clear,
		getContext 	: _getContext
	}
}());

export default class Container {

	static init( rootId )
	{
		Root = Root || document.getElementById( rootId );

		this.createContext();
		this.createHeader();
		this.createWrapper();

		Root.appendChild( this.context );
		window.TerminalState.change({}, 'CHANGE_MATRIX');
	}

	static createContext()
	{
		this.context 			= document.createElement('section');
		this.context.className	= 'terminal-wrap-custom clearfix';
	}

	static createHeader()
	{
		let header 			= document.createElement('header');
		header.className 	= 'term-header';
		header.innerHTML 	= 'Terminal';

		this.context.appendChild( header );
		return header;
	}

	static createWrapper()
	{
		termTableWrap 				= document.createElement('div');
		termTableWrap.className 	= 'term-body minimized';

		this.context.appendChild( termTableWrap );

		termTableWrap.appendChild( this.createTableMatrix() );
		termTableWrap.appendChild( this.createRightMenu() );
	}

	static createTableMatrix()
	{
		let leftSide 		= document.createElement('aside');
		leftSide.className	= 't-d-cell left';

		ActionsMenu.init();

		leftSide.appendChild( ActionsMenu.getContext() );
		leftSide.appendChild( TerminalCellMatrix.getContext() );

		return leftSide;
	}

	static createRightMenu()
	{
		let rightSide 		= document.createElement('aside');
		rightSide.className = 't-d-cell menu';

		rightSide.appendChild( MenuPanel.getContext() );
		return rightSide;
	}

	static clearPrev()
	{
		TerminalCellMatrix.clear();
	}

	static purgeScreens()
	{
		terminalList.forEach( ( terminal ) => {
			terminal.clear();
		})
	}

	static menuRender()
	{
		MenuPanel.render();
	}

	static render( params )
	{
		const sessionKey = params['gds'];
		const { rows : rowIndex , cells: cellIndex} = params.matrix;

		termTableWrap.className = `term-body minimized ${sessionKey}`;

		this.clearPrev();
		this.menuRender();

		terminalList = inSession[ sessionKey ] || [];

		TerminalCellMatrix
			.getCells(rowIndex, cellIndex)
			.map( ( cell, index ) => {

				if ( terminalList[index] )
				{
					terminalList[index].reattach( cell );
				} else
				{
					terminalList.push( new Terminal({
						name 			: index,
						sessionIndex	: params.sessionIndex,
						gds				: params.gds,
						parentContext	: cell
					}) );
				}
			});

		inSession[ sessionKey ] = terminalList;
	}
}