'use strict';
import Dom	from '../../helpers/dom';

export default class SessionKeys
{
	constructor( params )
	{
		this.context 	= document.createElement('div');
		this.settings 	= params;
		this.collection	= [];
		this.trigger	= [];
	}

	disableAll()
	{
		this.collection.map( btn => btn.disabled = true );
	}

	makeButton(value, index)
	{
		const button 		= Dom('button.btn btn-sm btn-purple font-bold pos-rlt');
		button.innerHTML	= value;

		if (window.TerminalState.getPcc()[index])
			button.innerHTML += `<span class="pcc-label">${window.TerminalState.getPcc()[index]}</span>`;

		if (this.settings.session === index)
			button.className += ' active';

		if ( !this.settings.active )
			button.className += ' hidden';

		button.disabled = !this.settings.terminal;

		button.addEventListener('click', () => {

			this.disableAll();
			window.TerminalState.change({ sessionIndex : index }, 'CHANGE_SESSION_BY_MENU');

		});

		return button;
	}

	getButtons()
	{
		return this.settings.list.map( this.makeButton.bind( this ) );
	}

	getTrigger()
	{
		this.trigger 			= Dom('button.btn btn-sm btn-mint font-bold' + ( this.settings['active'] ? ' active' : '' ));
		this.trigger.innerHTML	= this.settings['gds'];

		this.trigger.addEventListener('click', () => window.TerminalState.change({ gds : this.settings.gds }, 'CHANGE_GDS') );
		return this.trigger;
	}

	render()
	{
		this.context.appendChild( this.getTrigger() );

		if (this.settings.active)
			this.collection = this.getButtons().map( button => this.context.appendChild( button ) );

		return this.context;
	}
}