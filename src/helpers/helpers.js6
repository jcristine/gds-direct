'use strict';

/*function chunk(arr, limit)
{
	let result = [];

	while (arr.length > limit)
	{
		result.push(arr.slice(0, limit));
		arr = arr.slice(limit);
	}

	if (arr.length > 0)
		result.push(arr);

	return result;
}*/

const common = {
	'[': '¤',
	'=': '*',
	',': '+',
};

const sabreLayout = Object.assign({}, common, {
	'\'': '‡',
	'\\': '§',
	// shift + ","
});

const apolloLayout = Object.assign({}, common, {
	']': '$',
	'`': '>',
	';': ':',
	'\\': false
});

const _to_ascii = {
	'188': '44',
	'109': '45',
	'190': '46',
	'191': '47',
	'192': '96',
	'220': '92',
	'222': '39',
	'221': '93',
	'219': '91',
	'173': '45',
	'187': '61', //IE Key codes
	'186': '59', //IE Key codes
	'189': '45'  //IE Key codes
};

export function getReplacement( evt, isApollo )
{
	const char = String.fromCharCode(_to_ascii[ evt.keyCode || evt.which ] );
	return isApollo ? apolloLayout[char] : sabreLayout[char];
}

export function substitutePrintableChar(evt, isApollo)
{
	const keyCode	= evt.keyCode || evt.which;

	if ( keyCode === 13 )
		return false;

	const ch = String.fromCharCode(keyCode);

	if (!ch)
		return false;

	const layout = isApollo ? apolloLayout : sabreLayout;

	return layout[ch] !== undefined ? layout[ch] : ch.toUpperCase();
}

function chunkIntoPages( linesArr , rowsPerScreen )
{
	return linesArr.map(
		(line, lineIndex) => lineIndex % rowsPerScreen ? [] : linesArr.slice( lineIndex , lineIndex + rowsPerScreen )
	)
	.filter(
		( data ) => !!data.length
	);
}

function _makePages(txt, rowsPerScreen = 20, maxCharLimit)
{
	const chunkByCharLimit = _splitIntoLinesArr( txt, maxCharLimit );

	return chunkIntoPages(chunkByCharLimit, rowsPerScreen).map(
		(sectionLines) => sectionLines.join('\n')
	);
}

export function _splitIntoLinesArr( txt, maxCharLimit )
{
	const lines 		= splitLines(txt);
	const regex 		= new RegExp(`(.{1,${maxCharLimit}})`, 'gi');

	let chunkByCharLimit= [];

	lines.forEach( (line) => {
		let lineArr = line.match(regex);
		chunkByCharLimit = chunkByCharLimit.concat(lineArr);
	});

	return chunkByCharLimit;
}

function splitLines(txt)
{
	return txt.split(/\r?\n/);
}

export default {
	makeCachedParts 		: _makePages,
	substitutePrintableChar : substitutePrintableChar,
	getLines 				: _splitIntoLinesArr,
	splitLines 				: splitLines,
	getReplacement 			: getReplacement,
}