'use strict';

/*function chunk(arr, limit)
{
	let result = [];

	while (arr.length > limit)
	{
		result.push(arr.slice(0, limit));
		arr = arr.slice(limit);
	}

	if (arr.length > 0)
		result.push(arr);

	return result;
}*/

function substitutePrintableChar(ch)
{
	const isApollo	= window.TerminalState.state.language === 'APOLLO';

	const sabreLayout = {
		'\'': '‡',
		'[': '¤',
		'=': '*',
		'\\': '§',
		',': '+',
		// shift + ","
	};

	const apolloLayout = {
		'[': '¤',
		']': '$',
		'=': '*',
		'`': '>',
		',': '+',
		';': ':',
	};

	const layout = isApollo ? apolloLayout : sabreLayout;

	return layout[ch] || ch.toUpperCase();
}

function chunkIntoPages( linesArr , rowsPerScreen )
{
	return linesArr.map(
		(line, lineIndex) => lineIndex % rowsPerScreen ? [] : linesArr.slice( lineIndex , lineIndex + rowsPerScreen )
	)
	.filter(
		( data ) => !!data.length
	);
}

function _makePages(txt, rowsPerScreen = 20, maxCharLimit)
{
	const chunkByCharLimit = _splitIntoLinesArr( txt, maxCharLimit );

	return chunkIntoPages(chunkByCharLimit, rowsPerScreen).map(
		(sectionLines) => sectionLines.join('\n')
	);
}

function _splitIntoLinesArr( txt, maxCharLimit )
{
	const lines 		= splitLines(txt);
	const regex 		= new RegExp(`(.{1,${maxCharLimit}})`, 'gi');

	let chunkByCharLimit= [];

	lines.forEach( (line) => {
		let lineArr = line.match(regex);
		chunkByCharLimit = chunkByCharLimit.concat(lineArr);
	});

	return chunkByCharLimit;
}

function splitLines(txt)
{
	return txt.split(/\r?\n/);
}

export default {
	makeCachedParts 		:	_makePages,
	substitutePrintableChar :	substitutePrintableChar,
	getLines 				:	_splitIntoLinesArr,
}