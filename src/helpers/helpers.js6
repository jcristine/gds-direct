'use strict';

/*function chunk(arr, limit)
{
	let result = [];

	while (arr.length > limit)
	{
		result.push(arr.slice(0, limit));
		arr = arr.slice(limit);
	}

	if (arr.length > 0)
		result.push(arr);

	return result;
}*/

function substitutePrintableChar(ch)
{
	let isApollo	= window.TerminalState.state.language === 'APOLLO';

	const sabreLayout = {
		'\'': '‡',
		'[': '¤',
		'=': '*',
		'\\': '§',
		',': '+',
		// shift + ","
	};

	const apolloLayout = {
		'[': '¤',
		']': '$',
		'=': '*',
		'`': '>',
		',': '+',
		';': ':',
	};

	const layout = isApollo ? apolloLayout : sabreLayout;

	return layout[ch] || ch.toUpperCase();
}

function chunk(arr, limit)
{
	return arr.map( (line, index) => {
		return (index%limit) ? [] : arr.slice( index , index + limit );
	}).filter( ( data ) => { return !!data.length });
}

function splitLines(txt)
{
	return txt.split(/\r?\n/);
}

function makeCachedParts(txt, rows = 20, cols)
{
	const lines = splitLines(txt);

	// lines.map( ( line, index ) => {
		// console.log( line, index );
		// console.log( line.length, cols );
		// let b = line.match(/(.{1,20})/g);
		// console.log(b);
	// });

	return chunk(lines, rows).map( (sectionLines) => sectionLines.join('\n') );
}

export default {
	makeCachedParts 		:	makeCachedParts,
	substitutePrintableChar :	substitutePrintableChar
}