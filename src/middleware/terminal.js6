'use strict';

let $					= require('jquery');
window.$ 				= window.jQuery = $;

require('jquery.terminal/js/jquery.terminal');
require('keyboardevent-key-polyfill').polyfill();

import Noty 		from 'noty';
import Helpers 		from '../helpers/helpers';
import Pagination 	from '../modules/pagination';
import Session 		from '../modules/sabreSession';
import Spinner 		from '../modules/spinner';
import KeyBinding	from '../helpers/keyBinding';
import OutputLiner	from '../helpers/outputLiner';

export default class TerminalPlugin
{
	constructor( params )
	{
		this.settings 	= params;
		this.context	= params.context;
		this.name		= params.name;

		this.animation	 	= false;
		this.hiddenBuff		= [];
		this.hiddenCommand	= '';
		// this.cmdLineOffset	= 0;

		this.allowManualPaging = params.gds === 'sabre';
		// this.allowManualPaging = true;

		this.session = new Session({
			terminalIndex	: params.name,
			sessionIndex	: params.sessionIndex,
			gds				: params.gds
		});

		this.pagination = new Pagination( this.terminal );

		this.terminal 	= this.init();
		this.spinner 	= new Spinner( this.terminal );

		this.outputLiner = new OutputLiner( this.terminal );
	}

	getPlugin()
	{
		return this.terminal;
	}

	parseChar( evt, terminal )
	{
		if ( !terminal.enabled() ) // key press fires globally on all terminals;
			return false;

		let keyCode = evt.keyCode || evt.which;
		let ch 		= false;

		if (keyCode === 13)
			return false;

		if (keyCode && !evt.ctrlKey)
			ch = Helpers.substitutePrintableChar( String.fromCharCode( keyCode ) );

		if (ch)
		{
			if ( this.animation )
			{
				this.hiddenCommand += ch;
			} else
			{
				terminal.insert(ch);
			}

			return false;
		}
	}

	parseKeyBinds( evt, terminal )
	{
		let keyCode = evt.keyCode || evt.which;

		if ( this.animation )
		{
			if ( keyCode === 13 )
			{
				this.hiddenBuff.push( this.hiddenCommand );
				this.hiddenCommand = '';
				return false;
			}
		}

		if ( !KeyBinding.parse( evt, terminal ) )
			return false;
	}

	changeActiveTerm( terminal )
	{
		window.TerminalState.change({
			activeTerminal 	: terminal
		}, 'CHANGE_ACTIVE_TERMINAL');
	}

	init()
	{
		this.terminal = $(this.context).terminal( this.commandParser.bind(this), {
			greetings		: '',
			name			: this.name,
			prompt			: '>',
			scrollOnEcho	: false,

			keypress		: this.parseChar.bind(this),
			keydown			: this.parseKeyBinds.bind(this),

			onInit			: this.changeActiveTerm,
			onTerminalChange: this.changeActiveTerm,

			keymap			: {
				'CTRL+W'()
				{
					alert('ctrl + w');
				},

				'CTRL+J'()
				{
					console.log(' JJJJ ', arguments );
				},

				'CTRL+S'()
				{
					window.TerminalState.purgeScreens();
				},
			}

			//exceptionHandler	 : function () {
			//	console.log('exc', arguments)
			//}
		});

		return this.terminal;
	}

	switchArea( command )
	{
		const sessionChange = window.TerminalState.getSessionAreaMap().indexOf( command );

		if ( sessionChange !== -1 )
		{
			window.TerminalState.change({
				sessionIndex 	: sessionChange,
				gds				: this.settings.gds
			}, 'CHANGE_SESSION');
		}
	}

	commandParser( command, terminal ) //pressed enter
	{
		if ( !command || command === '' )
			return false;

		// console.log( 'rows', terminal.rows() );
		// console.log( 'cols', terminal.cols() );

		if ( this.allowManualPaging )
		{
			switch (command)
			{
				case 'MD' :
					terminal.echo( this.pagination.next().print() );
				return false;

				case 'MU' :
					terminal.echo( this.pagination.prev().print() );
				return false;

				case 'MDA' :
					terminal.echo( this.pagination.printAll() );
				return false;

				case 'MDA5' :
					return false;

				case 'MDA20' :
					return false;

				// default :
					// return '';
			}
		}

		this.spinner.start();

		this.outputLiner.removeEmptyLine(); // loader
		this.animation = true;

		this.sendRequest(command);
	}

	sendRequest( command )
	{
		this.session
			.run({
				cmd : command
			})

			.then( ( response = {} ) => {
				this.spinner.end();
				this.animation 	= false;
				return response;
			})

			.then( this.parseBackEnd.bind(this) )
			.then( () => {

				if (this.hiddenBuff.length)
				{
					const cmd = this.hiddenBuff.shift();

					if ( cmd )
						this.terminal.exec( cmd );
				} else
				{
					if ( this.hiddenCommand )
					{
						this.terminal.insert( this.hiddenCommand );
						this.hiddenCommand = '';
					}
				}

				this.switchArea( command );
			})
			// .catch( this.parseError.bind(this) );
	}

	parseBackEnd( response = {} )
	{
		const result = response['data'];

		// if ( result['prompt'] )
		// 	this.terminal.set_prompt( result['prompt'] );

		if ( result['output'] )
		{
			if ( this.allowManualPaging )
			{
				const output = this.pagination
					.bindOutput( result['output'], this.terminal.rows() - 1, this.terminal.cols() )
					.print();

				this.terminal.echo( output );
				return '';
			}

			this.outputLiner.prepare( result['output'] );

			if ( result['clearScreen'] && window.TerminalState.getMatrix().rows !== 0 ) // if 1 row of terminals don't
			{

				this.debug( 'Clear Screen is On' );
				this.outputLiner.empty().printOutput().countEmptyLines().attachEmpty().scroll();
			}
			else
			{
				this.outputLiner.reduceEmpty().attachEmpty().printOutput();
			}
		}

		if ( result['canCreatePQ'] )
		{
			this.debug( 'Can create PQ' );
		}

		if ( result['pcc'] )
		{
			window.TerminalState.change({
				pcc : result['pcc'],
			}, 'CHANGE_PCC');
		}
	}

	debug( txt )
	{
		new Noty({
			text	: `DEBUG : ${txt}`,
			layout 	: 'bottomRight',
			timeout : 1000
			// theme	: 'bootstrap-v4',
			// type 	: 'info'
		}).show();
	}

	parseError(e)
	{
		// console.log('errrrrrr');
		this.spinner.end();

		// this.terminal.resume();
		// alert(' something went wrong ');

		console.error(' error', arguments );
		this.terminal.error( String(e) );
	}
}