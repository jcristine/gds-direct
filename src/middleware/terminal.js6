'use strict';

let $					= require('jquery');
window.$ 				= window.jQuery = $;

let jqTerminal 			= require('jquery.terminal/js/jquery.terminal');
let Helpers				= require('../helpers/helpers');

require('keyboardevent-key-polyfill').polyfill();

const cliSpinners 		= require('cli-spinners');

import Session 		from '../modules/sabreSession';
import KeyBinding	from '../helpers/keyBinding';

class Spinner
{
	constructor( terminal )
	{
		this.timer 		= false;
		this.terminal 	= terminal;
		this.promt 		= false;
		this.spinner	= cliSpinners.simpleDots;

		this.frameCounter = 0;
	}

	set()
	{
		let text = this.spinner.frames[this.frameCounter++ % this.spinner.frames.length];
		this.terminal.set_prompt(text);
	}

	start()
	{
		if (this.timer)
			this.end();

		this.terminal.find('.cursor').hide();
		this.prompt 	= this.terminal.get_prompt();

		this.set();
		this.timer 		= setInterval( this.set.bind(this), this.spinner.interval);
	}

	end()
	{
		clearInterval( this.timer );

		// setTimeout(() => {
			clearInterval( this.timer );
			this.terminal.set_prompt( this.prompt );
			this.terminal.find('.cursor').show();

			this.timer = false;
		// }, 0);
	}
}

export default class TerminalPlugin
{
	constructor( params )
	{
		this.settings 	= params;
		this.context	= params.context;
		this.name		= params.name;
		this.terminal 	= null;

		this.outputCache 	= [];
		this.animation	 	= false;
		this.hiddenBuff		= [];

		this.session = new Session({
			terminalIndex	: params.name,
			sessionIndex	: params.sessionIndex,
			gds				: params.gds,
			// language		: params.language,
		});

		this.init();
	}

	getPlugin()
	{
		return this.terminal;
	}

	parseInput( evt, terminal )
	{
		if ( !terminal.enabled() ) // key press fires globally on all terminals;
			return false;

		let keyCode = evt.keyCode || evt.which;
		let ch 		= false;

		if (keyCode === 13)
			return false;

		// console.log(' blaaaa aaa ', String.fromCharCode( keyCode ) );

		if (keyCode && !evt.ctrlKey)
		{
			ch = Helpers.substitutePrintableChar( String.fromCharCode( keyCode ) );

			// if (ch)
			// {
			//
			// }
		}

		if ( this.animation )
		{
			// console.log( this.hiddenBuff.length );

			if ( this.hiddenBuff.length === 0 )
			{
				this.hiddenBuff.push('');
			}

			this.hiddenBuff[ this.hiddenBuff.length - 1 ] += ch;

			// this.hiddenBuff += ch;
			return false;
		}

		if (ch)
		{
			terminal.insert(ch);
			return false;
		}
	}

	parseKeyBinds( evt, terminal )
	{
		let keyCode = evt.keyCode || evt.which;

		if ( this.animation )
		{
			if ( keyCode === 13 )
			{
				// console.log(' command to ryb ' , this.hiddenBuff );
				this.hiddenBuff.push('');

				// this.spinner.end();
				// terminal.exec( this.hiddenBuff );
				// this.hiddenBuff = '';

				return false;
			}

			// this.hiddenBuff += String.fromCharCode( keyCode );
			// return false;
		}

		if ( !KeyBinding.parse( evt, terminal ) )
		{
			return false;
		}
	}

	// onInit( terminal )
	// {
	// 	console.log( 'ON INIT ' , this)
		//SabreSession.startSession();
		// let startSessionOutput = SabreSession.startSession();
		//terminal.echo('>' + startSessionOutput['emulationCommand']);
		//terminal.echo(startSessionOutput['emulationCommandOutput']);
	// }

	init()
	{
		this.terminal = $(this.context).terminal( this.commandParser.bind(this), {
			greetings	: '',

			name		: this.name,
			prompt		: '>',

			keypress	: this.parseInput.bind(this),
			keydown		: this.parseKeyBinds.bind(this),

			// numChars	: false

			// wrap		: false,
			// outputLimit : 3

			// onInit		: this.onInit
			//,
			//
			//onTerminalChange	: function () {
			//	console.log(' terminal change 1')
			//},
			//
			//exceptionHandler	 : function () {
			//	console.log('exc', arguments)
			//}
		});

		this.spinner = new Spinner( this.terminal );
	}

	commandParser( command, terminal )
	{
		// console.log( terminal.rows() );
		// console.log( terminal.cols() );

		if ( !command || command === '' )
		{
			// terminal.echo('');
			return false;
		}

		if ( this.settings.gds === 'sabre' && command === 'MD' )
		{
			terminal.echo( this.outputCache.length > 0 ?  this.outputCache.shift() : '‡NOTHING TO SCROLL‡' );
			return false;
		}

		if ( command === 'MU' )
		{
			terminal.echo( this.outputCache.length > 0 ?  this.outputCache.shift() : '‡NOTHING TO SCROLL‡' );
			return false;
		}

		let sessionChange = ['SA', 'SB', 'SC', 'SD', 'SE' ].indexOf( command );

		if ( sessionChange !== -1 )
		{
			// console.log( command.replace('S', '') );
			// console.log( sessionChange );

			window.TerminalState.change({
				sessionIndex 	: sessionChange,
				gds				: this.settings.gds
			}, 'CHANGE_SESSION');

		}

		this.spinner.start();
		this.animation 	= true;
		// terminal.pause();

		this.session
			.run({
				cmd : command
			})

			.then( ( response = {} ) => {
				this.spinner.end();
				// terminal.insert( this.hiddenBuff );
				this.animation 	= false;
				return response;
			})

			.then( this.parseBackEnd.bind(this) )
			.then( () => {

				this.hiddenBuff.map( ( command ) => {
					if (command)
						terminal.exec( command );

				});

				this.hiddenBuff = [];
			})

			// .then( function () {
			// 	terminal.resume();
			// })

			.catch( this.parseError.bind(this) );
	}

	parseBackEnd( response = {} )
	{
		let result = response['data'];

		if ( result['prompt'] )
			this.terminal.set_prompt( result['prompt'] );

		if ( result['clearScreen'] )
			this.terminal.clear();

		if ( result['output'] )
		{
			this.outputCache = Helpers.makeCachedParts( result['output'], this.terminal.rows() );
			this.terminal.echo( this.outputCache.shift() );
		}
	}

	parseError(e)
	{
		console.log('errrrrrr');

		this.spinner.end();

		// this.terminal.resume();
		// alert(' something went wrong ');

		console.error(' error', arguments );
		this.terminal.error( String(e) );
	}
}