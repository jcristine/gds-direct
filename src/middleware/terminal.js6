'use strict';

let $					= require('jquery');
window.$ 				= window.jQuery = $;

let jqTerminal 			= require('jquery.terminal/js/jquery.terminal');
let Helpers				= require('../helpers/helpers');

import Session from '../modules/sabreSession';

export default class TerminalPlugin
{
	constructor( context, name )
	{
		this.context	= context;
		this.name		= name;
		this.terminal 	= null;
		this.outputCache = [];

		this.session = new Session({
			terminalIndex	: name
		});

		this.init();
	}

	getPlugin()
	{
		return this.terminal;
	}

	static parseInput( evt, terminal )
	{
		if ( !terminal.enabled() ) // key press fires globally on all terminals;
			return false;

		if (evt.which === 13)
			return false;

		if (evt.which && !evt.ctrlKey)
		{
			let ch = Helpers.substitutePrintableChar( String.fromCharCode( evt.which ) );

			if (ch)
			{
				terminal.insert(ch);
				return false;
			}
		}
	}

	static parseKeyBinds( evt, terminal )
	{
		if ( (evt.which === 83 || evt.which === 87) && evt.ctrlKey )
		{
			//console.log("BBBB", terminal);
			// CTRL+S || CTRL+W;

			terminal.clear();
			return false;

		} else if (evt.which === 68 && evt.ctrlKey)
		{
			// CTRL+D
			return false;
		} else if (evt.which === 76 && evt.ctrlKey)
		{
			// CTRL+L
			return false;
		} else if (evt.which === 82 && evt.ctrlKey)
		{
			// CTRL+R
			return false;
		}
	}

	// onInit( terminal )
	// {
	// 	console.log( 'ON INIT ' , this)
		//SabreSession.startSession();
		// let startSessionOutput = SabreSession.startSession();
		//terminal.echo('>' + startSessionOutput['emulationCommand']);
		//terminal.echo(startSessionOutput['emulationCommandOutput']);
	// }

	init()
	{
		this.terminal = $(this.context).terminal( this.commandParser.bind(this), {
			greetings	: '',
			// name		: `sabre_terminal_${this.name}`,

			name		: this.name,
			prompt		: '>',
			//enabled		: false,
			keypress	: TerminalPlugin.parseInput,
			keydown		: TerminalPlugin.parseKeyBinds
			// numChars	: false

			// wrap		: false,
			// outputLimit : 3

			// onInit		: this.onInit
			//,
			//
			//onTerminalChange	: function () {
			//	console.log(' terminal change 1')
			//},
			//
			//exceptionHandler	 : function () {
			//	console.log('exc', arguments)
			//}
		});
	}

	commandParser( command, terminal )
	{
		// console.log( terminal.rows() );
		// console.log( terminal.cols() );

		if ( !command || command === '' )
		{
			// terminal.echo('');
			return false;
		}

		if ( command === 'MD' )
		{
			terminal.echo( this.outputCache.length > 0 ?  this.outputCache.shift() : '‡NOTHING TO SCROLL‡' );
			return false;
		}

		this.session
			.run({
				cmd : command
			})
			.then( this.parseBackEnd.bind(this) )
			.catch( this.parseError );
	}

	parseBackEnd( response = {} )
	{
		let result = response['data'];

		if ( result['prompt'] )
			this.terminal.set_prompt( result['prompt'] );

		if ( result['clearScreen'] )
			this.terminal.clear();

		if ( result['output'] )
		{
			this.outputCache = Helpers.makeCachedParts( result['output'] );
			this.terminal.echo( this.outputCache.shift() );
		}
	}

	parseError()
	{
		alert(' something went wrong ');
		console.warn(' error', arguments )
		//terminal.error( new String(e) );
	}
}