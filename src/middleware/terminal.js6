'use strict';

let $					= require('jquery');
window.$ 				= window.jQuery = $;

let jqTerminal 			= require('jquery.terminal/js/jquery.terminal');
let Helpers				= require('../helpers/helpers');

const cliSpinners = require('cli-spinners');
console.log(cliSpinners);


import Session 		from '../modules/sabreSession';
import KeyBinding	from '../helpers/keyBinding';

class Spinner
{
	constructor( terminal )
	{
		this.timer 		= false;
		this.terminal 	= terminal;
		this.promt 		= false;
		this.spinner	= cliSpinners.line;

		this.frameCounter = 0;
	}

	set()
	{
		let text = this.spinner.frames[this.frameCounter++ % this.spinner.frames.length];
		this.terminal.set_prompt(text);
	}

	start()
	{
		this.terminal.find('.cursor').hide();
		this.prompt 	= this.terminal.get_prompt();

		this.set();
		this.timer 		= setInterval( this.set.bind(this), this.spinner.interval);
	}

	end()
	{
		clearInterval( this.timer );

		setTimeout(() => {
			clearInterval( this.timer );
			this.terminal.set_prompt( this.prompt );
			this.terminal.find('.cursor').show();
		}, 0);
	}
}

export default class TerminalPlugin
{
	constructor( params )
	{
		this.context	= params.context;
		this.name		= params.name;
		this.terminal 	= null;
		this.outputCache = [];
		this.animation	 = false;

		this.session = new Session({
			terminalIndex	: params.name,
			sessionIndex	: params.sessionIndex,
			gds				: params.gds,
			// language		: params.language,
		});

		this.init();
	}

	getPlugin()
	{
		return this.terminal;
	}

	parseInput( evt, terminal )
	{
		if ( !terminal.enabled() ) // key press fires globally on all terminals;
			return false;

		if (evt.which === 13)
			return false;

		if (evt.which && !evt.ctrlKey)
		{
			let ch = Helpers.substitutePrintableChar( String.fromCharCode( evt.which ) );

			if (ch)
			{
				terminal.insert(ch);
				return false;
			}
		}
	}

	parseKeyBinds( evt, terminal )
	{
		if ( this.animation )
			return false;

		if ( !KeyBinding.parse( evt, terminal ) )
		{
			return false;
		}
	}

	// onInit( terminal )
	// {
	// 	console.log( 'ON INIT ' , this)
		//SabreSession.startSession();
		// let startSessionOutput = SabreSession.startSession();
		//terminal.echo('>' + startSessionOutput['emulationCommand']);
		//terminal.echo(startSessionOutput['emulationCommandOutput']);
	// }

	init()
	{
		this.terminal = $(this.context).terminal( this.commandParser.bind(this), {
			greetings	: '',
			// name		: `sabre_terminal_${this.name}`,

			name		: this.name,
			prompt		: '>',

			keypress	: this.parseInput.bind(this),
			keydown		: this.parseKeyBinds.bind(this),

			// numChars	: false

			// wrap		: false,
			// outputLimit : 3

			// onInit		: this.onInit
			//,
			//
			//onTerminalChange	: function () {
			//	console.log(' terminal change 1')
			//},
			//
			//exceptionHandler	 : function () {
			//	console.log('exc', arguments)
			//}
		});

		this.spinner = new Spinner( this.terminal );
	}

	// spinner( terminal )
	// {
	// 	let animation 	= true;
	// 	let i 			= 0;
	//
	// 	let spinner 	= cliSpinners.circle;
	// 	let prompt 		= terminal.get_prompt();
	//
	// 	function set()
	// 	{
	// 		let text = spinner.frames[i++ % spinner.frames.length];
	// 		terminal.set_prompt(text);
	// 	}
	//
	// 	terminal.find('.cursor').hide();
	// 	set();
	//
	// 	let timer = setInterval(set, spinner.interval);
	// }

	commandParser( command, terminal )
	{
		// console.log( terminal.rows() );
		// console.log( terminal.cols() );

		if (this.animation)
			return false;

		if ( !command || command === '' )
		{
			// terminal.echo('');
			return false;
		}

		if ( command === 'MD' )
		{
			terminal.echo( this.outputCache.length > 0 ?  this.outputCache.shift() : '‡NOTHING TO SCROLL‡' );
			return false;
		}

		if ( command === 'MU' )
		{
			terminal.echo( this.outputCache.length > 0 ?  this.outputCache.shift() : '‡NOTHING TO SCROLL‡' );
			return false;
		}

		this.spinner.start();
		this.animation 	= true;
		// terminal.pause();

		this.session
			.run({
				cmd : command
			})

			.then( ( response = {} ) => {

				console.log('stop');

				this.spinner.end();
				this.animation = false;

				return response;
			})

			.then( this.parseBackEnd.bind(this) )
			.then( function () {
				terminal.resume();
			})
			.catch( this.parseError.bind(this) );
	}

	parseBackEnd( response = {} )
	{
		let result = response['data'];

		if ( result['prompt'] )
			this.terminal.set_prompt( result['prompt'] );

		if ( result['clearScreen'] )
			this.terminal.clear();

		if ( result['output'] )
		{
			this.outputCache = Helpers.makeCachedParts( result['output'], this.terminal.rows() );
			this.terminal.echo( this.outputCache.shift() );
		}
	}

	parseError(e)
	{
		this.spinner.end();
		this.terminal.resume();
		// alert(' something went wrong ');
		console.error(' error', arguments );
		this.terminal.error( String(e) );
	}
}